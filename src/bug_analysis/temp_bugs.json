[
  {
    "statements": [
      "CREATE TABLE test (c1 TEXT PRIMARY KEY) WITHOUT ROWID;",
      "CREATE INDEX index_0 ON test(c1 COLLATE NOCASE);",
      "INSERT INTO test(c1) VALUES ('A');",
      "INSERT INTO test(c1) VALUES ('a');",
      "SELECT * FROM test; -- only one row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE test (c0);",
      "CREATE INDEX index_0 ON test(c0 LIKE '');",
      "PRAGMA case_sensitive_like=false;",
      "VACUUM;",
      "SELECT * from test; -- Error: malformed database schema (index_0) - non-deterministic functions prohibited in index expressions"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE test (c0, c1 REAL);",
      "CREATE UNIQUE INDEX index_1 ON test(c0 GLOB c1);",
      "INSERT INTO test(c0, c1) VALUES ('1', '1');",
      "INSERT INTO test(c0, c1) VALUES ('0', '1');",
      "REINDEX; -- Error: UNIQUE constraint failed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE test (c0, c1 TEXT);",
      "CREATE UNIQUE INDEX IF NOT EXISTS index_0 ON test(c1 == FALSE);",
      "CREATE INDEX IF NOT EXISTS index_1 ON test(c0 || FALSE) WHERE c1;",
      "INSERT OR IGNORE INTO test(c0, c1) VALUES ('a', TRUE);",
      "INSERT OR IGNORE INTO test(c0, c1) VALUES ('a', FALSE);",
      "PRAGMA legacy_file_format=true;",
      "REINDEX; -- Error: UNIQUE constraint failed: index 'index_0'"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE test (c0 REAL);",
      "CREATE INDEX index_0 ON test(c0 COLLATE NOCASE);",
      "INSERT INTO test(c0) VALUES ('+/');",
      "SELECT * FROM test WHERE (c0 LIKE '+/'); -- fetches no row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE test (c0 NOT NULL);",
      "INSERT INTO test(c0) VALUES (NULL) ON CONFLICT DO NOTHING; -- results in an error",
      "INSERT OR IGNORE INTO test(c0) VALUES (NULL); -- does not result in an error"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE test (c0 REAL);",
      "CREATE UNIQUE INDEX index_0 ON test(TYPEOF(c0));",
      "INSERT OR IGNORE INTO test(c0) VALUES (0.1);",
      "INSERT OR IGNORE INTO test(c0) VALUES (FALSE);",
      "REINDEX; -- UNIQUE constraint failed: index 'index_0'"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE test (c0 REAL);",
      "CREATE UNIQUE INDEX index_0 ON test(LENGTH(-c0));",
      "INSERT INTO test(c0) VALUES (0.0), ('10:');",
      "REINDEX; -- UNIQUE constraint failed: index 'index_0'"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE INDEX index_0 ON t0(c0) WHERE (~c0) NOT NULL;",
      "INSERT INTO t0(c0) VALUES (NULL);",
      "SELECT * FROM t0 WHERE (LIKELY(~c0) OR TRUE); -- no row fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0 INTEGER, PRIMARY KEY (c0)) WITHOUT ROWID;",
      "ALTER TABLE t0 RENAME COLUMN c0 TO c1; -- no such column: c0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA foreign_keys=true;",
      "CREATE TABLE t0 (c0 UNIQUE, c1 UNIQUE, FOREIGN KEY(c0) REFERENCES t0(c1));",
      "INSERT OR FAIL INTO t0(c0, c1) VALUES (0, 1);",
      "INSERT OR FAIL INTO t0(c0, c1) VALUES (0, 2);",
      "SELECT * FROM t0; -- returns no row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE TABLE t1(c0 INTEGER PRIMARY KEY);",
      "PRAGMA reverse_unordered_selects=true;",
      "INSERT INTO t1(c0) VALUES (0);",
      "INSERT INTO t0(c0) VALUES ('a');",
      "SELECT * FROM t1, t0 WHERE t1.c0 < t0.c0; -- no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT UNIQUE COLLATE NOCASE);",
      "INSERT INTO t0(c0) VALUES ('./');",
      "SELECT * FROM t0 WHERE t0.c0 LIKE './'; -- fetches no rows"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INTEGER PRIMARY KEY);",
      "INSERT INTO t0(c0) VALUES (1);",
      "PRAGMA reverse_unordered_selects=true;",
      "SELECT * FROM t0 WHERE ((t0.c0 > 'a') OR (t0.c0 <= 'a')); -- fetches no row",
      "SELECT ((t0.c0 > 'a') OR (t0.c0 <= 'a')) FROM t0; -- returns 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t1 (c0, c1 REAL PRIMARY KEY);",
      "INSERT INTO t1(c0, c1) VALUES (TRUE, 9223372036854775807), (TRUE, 0);",
      "UPDATE t1 SET c0 = NULL;",
      "UPDATE OR REPLACE t1 SET c1 = 1;",
      "SELECT DISTINCT * FROM t1 WHERE (t1.c0 IS NULL); -- database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT 1e500 >= 1,  CAST(1e500 AS INT) >= CAST(1 AS INT), ROUND(1e500) >= ROUND(1); -- 1|1|0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE IF NOT EXISTS t0 (c0);",
      "CREATE INDEX IF NOT EXISTS i0 ON t0(1) WHERE c0 NOT NULL;",
      "INSERT INTO t0(c0) VALUES(NULL);",
      "SELECT * FROM t0 WHERE t0.c0 IS NOT 1; -- returns no row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0 PRIMARY KEY DESC, c1 UNIQUE DEFAULT NULL) WITHOUT ROWID;",
      "INSERT INTO t0(c0) VALUES (1), (2), (3), (4), (5);",
      "REINDEX;",
      "SELECT * FROM t0 WHERE t0.c0 IN (SELECT c0 FROM t0) AND t0.c1 ISNULL; -- fetches only one row instead of all five rows"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA reverse_unordered_selects=true;",
      "CREATE TABLE t1 (c0, c1); CREATE TABLE t2 (c0 INT UNIQUE);",
      "INSERT INTO t1(c0, c1) VALUES (0, 0), (0, NULL);",
      "INSERT INTO t2(c0) VALUES (1);",
      "SELECT 1, NULL INTERSECT SELECT * FROM (SELECT t2.c0, t1.c1 FROM t1, t2 WHERE ((t2.rowid <= 'a')) OR (t1.c0 <= t2.c0) ORDER BY 'a' DESC LIMIT 100); -- no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0);",
      "CREATE TABLE t1 (c1 REAL);",
      "INSERT INTO t1(c1) VALUES (8366271098608253588);",
      "INSERT INTO t0(c0) VALUES ('a');",
      "SELECT * FROM t1 WHERE (t1.c1 = CAST(8366271098608253588 AS REAL)); -- fetches row",
      "SELECT * FROM t0, t1 WHERE (t1.c1 = CAST(8366271098608253588 AS REAL)); -- fetches no row",
      "SELECT * FROM t0, t1 WHERE (t1.c1 >= CAST(8366271098608253588 AS REAL) AND t1.c1 <= CAST(8366271098608253588 AS REAL)); -- fetches row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA journal_mode=OFF;",
      "PRAGMA main.cache_size=0;",
      "CREATE TABLE IF NOT EXISTS t0 (c0);",
      "CREATE INDEX i0 ON t0(1);",
      "DROP INDEX \"i0\";",
      "INSERT OR IGNORE INTO t0(c0) VALUES (1), (2);",
      "CREATE UNIQUE INDEX i0 ON t0(1); -- UNIQUE constraint failed: index 'i0'",
      "CREATE UNIQUE INDEX i0 ON t0(1); -- database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0, c1, PRIMARY KEY (c0, c1));",
      "CREATE TABLE t1 (c0);",
      "INSERT INTO t1 VALUES (2);",
      "SELECT * FROM t0, t1 WHERE (t0.c1 >= 1 OR t0.c1 < 1) AND t0.c0 IN (1, t1.c0) ORDER BY 1; -- results in a segfault"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c1, c2);",
      "INSERT INTO t0(c1, c2) VALUES  ('a', 1);",
      "CREATE INDEX i0 ON t0(\"C3\");",
      "ALTER TABLE t0 RENAME COLUMN c1 TO c3;",
      "SELECT DISTINCT * FROM t0; -- fetches C3|1 rather than a|1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "INSERT INTO t0(c0) VALUES ('val');",
      "SELECT * FROM t0 WHERE (((0 IS NOT FALSE) OR NOT (0 IS FALSE OR (t0.c0 IN (-1)))) IS 0); -- fetches no row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE IF NOT EXISTS t0(c0);",
      "INSERT INTO t0(c0) VALUES (-9223372036854775808);",
      "BEGIN TRANSACTION;",
      "CREATE INDEX i0 ON t0(ABS(c0)); -- integer overflow (expected)",
      "COMMIT; -- unexpected: the index is still created",
      "CREATE INDEX i0 ON t0(1); -- malformed database schema (i0) - index i0 already exists"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT CAST('-' AS NUMERIC); -- unexpected: computes 0.0 rather than 0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT '' - 2851427734582196970; -- actual: -2851427734582196736, expected: -2851427734582196970"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0 TEXT);",
      "INSERT INTO t0(c0) VALUES ('1.0');",
      "SELECT CAST(c0 AS NUMERIC) FROM t0; -- expected: 1, actual: 1.0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE INDEX i0 ON t0('1' IN ());",
      "ALTER TABLE t0 RENAME TO t1; -- error in index i0: no such column: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT PRIMARY KEY COLLATE NOCASE);",
      "INSERT INTO t0 VALUES (' 1-');",
      "SELECT * FROM t0 WHERE t0.c0 LIKE ' 1-'; -- expected: ' 1-', actual: no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t1 (c0);",
      "CREATE INDEX i0 ON t1((LIKELIHOOD(c0, 100) IN ())); -- unexpected: no error",
      "ALTER TABLE t1 RENAME COLUMN c0 TO c1; -- error occurs only here: second argument to likelihood() must be a constant between 0.0 and 1.0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": ["SELECT -'.'; -- expected: 0, actual: 0.0"],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT ((CAST(1 as INT)) COLLATE BINARY) == '1'; -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE INDEX i0 ON t0(((LIKELIHOOD(1, 2)) AND ((1 IN ())))); -- unexpected: no error",
      "ALTER TABLE t0 RENAME TO t1; -- -- error occurs only here: second argument to likelihood() must be a constant between 0.0 and 1.0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": ["SELECT -'1.0'; -- expected: -1, actual: -1.0"],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT (1 IN (CAST('1' as TEXT) COLLATE NOCASE)); -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT CAST('8.2250617031974513E18' AS NUMERIC); -- expected: 8225061703197451300, unexpected: 8.22506170319745e+18"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT LIKELY(CAST(1 AS INT)) = '1'; -- expected: 0, actual: 1",
      "SELECT UNLIKELY(CAST(1 AS INT)) = '1'; -- expected: 0, actual: 1",
      "SELECT LIKELIHOOD(CAST(1 AS INT), 0.5) = '1'; -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT 0.5 IS TRUE COLLATE NOCASE; -- expected: 1, actual: 0",
      "SELECT 0.5 IS TRUE COLLATE RTRIM; -- expected: 1, actual: 0",
      "SELECT 0.5 IS TRUE COLLATE BINARY; -- expected: 1, actual: 0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT CAST('-0.0' AS NUMERIC); -- expected: 0, unexpected: 0.0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 COLLATE NOCASE);",
      "INSERT INTO t0(c0) VALUES ('a');",
      "SELECT * FROM t0 WHERE CAST(t0.c0 AS TEXT) = 'A'; -- expected: no row is fetched, actual: a"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT UNIQUE COLLATE NOCASE);",
      "INSERT INTO t0(c0) VALUES ('.1%');",
      "SELECT * FROM t0 WHERE t0.c0 LIKE '.1%'; -- expected: '.1%', actual: no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 COLLATE RTRIM, c1 BLOB UNIQUE, PRIMARY KEY (c0, c1)) WITHOUT ROWID;",
      "INSERT INTO t0 VALUES (123, 3), (' ', 1), ('\t', 2), ('', 4);",
      "SELECT * FROM t0 WHERE c1 = 1; -- expected: ' ', 1, actual: no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT UNIQUE, c1 INT, c2 INT UNIQUE) ENGINE = MyISAM;",
      "INSERT INTO t0(c0) VALUES(DEFAULT), (\"\");",
      "INSERT IGNORE INTO t0(c2) VALUES(\"a\");",
      "REPLACE INTO t0(c1, c0, c2) VALUES(1, DEFAULT, DEFAULT), (DEFAULT, \"a\", \"a\");",
      "REPAIR TABLE t0 QUICK EXTENDED USE_FRM;",
      "SELECT * FROM t0; -- unexpected: Table 'to' is marked as crashed and last (automatic?) repair failed"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c3 TEXT);",
      "INSERT INTO t0(c3) VALUES ('0');",
      "SELECT * FROM t0 WHERE (t0.c3 COLLATE NOCASE) BETWEEN 1 AND '5'; -- expected: no row is fetched, actual: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT UNIQUE, c1 INT, c2 INT, c3 INT UNIQUE) ENGINE = MyISAM;",
      "INSERT INTO t0(c0) VALUES(DEFAULT), (\"a\");",
      "INSERT IGNORE INTO t0(c3) VALUES(\"a\"), (1);",
      "REPLACE INTO t0(c1, c0, c3) VALUES(1, 2, 3), (1, \"a\", \"a\");",
      "SELECT (NULL) IN (SELECT t0.c3 FROM t0 WHERE t0.c0);"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT UNIQUE) ENGINE = HEAP;",
      "INSERT INTO t0(c0) VALUES (DEFAULT), (\"a\"), (\"a\");",
      "SELECT (NULL) IN (SELECT t0.c0 FROM t0 WHERE ((t0.c0) OR TRUE) IS NULL); -- unexpected: ERROR 1032 (HY000): Can't find record in 't0'"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT UNSIGNED);",
      "INSERT INTO t0(c0) VALUES(4294967294);",
      "CREATE INDEX i0 ON t0((ABS(t0.c0))); -- unexpected: ERROR 3752 (22003): Value is out of range for functional index 'i0'"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT PRIMARY KEY UNIQUE);",
      "ALTER TABLE t0 DROP PRIMARY KEY;",
      "select COLUMN_KEY, COLUMN_NAME from information_schema.columns where table_schema = 'a' and TABLE_NAME = 't0'; -- unexpected: c0 is still shown as PRI",
      "ALTER TABLE t0 DROP PRIMARY KEY; -- ERROR 1091 (42000): Can't DROP 'PRIMARY'; check that column/key exists"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TINYINT);",
      "INSERT INTO t0(c0) VALUES(NULL);",
      "SELECT * FROM t0 WHERE NOT(t0.c0 <=> 2035382037); -- expected: row is fetched, actual: no row is fetched"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT);",
      "INSERT INTO t0(c0) VALUES(1);",
      "SELECT * FROM t0 WHERE IF(FALSE, t0.c0, 0.1); -- expected: row is fetched, actual: row is not fetched"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": ["SELECT FALSE XOR '0.5'; -- expected: 1, actual: 0"],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT) ENGINE = MyISAM;",
      "select * from information_schema.TABLES; -- unexpected (when executed with multiple threads): Duplicate entry 'triggerbug21-t0' for key 'PRIMARY'"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "DROP DATABASE IF EXISTS test;",
      "CREATE DATABASE test;",
      "USE test;",
      "CREATE TABLE t0(c0 INT);",
      "CREATE INDEX i0 ON t0((t0.c0 || 1));",
      "INSERT INTO t0(c0) VALUES(1);",
      "CHECK TABLE t0 FOR UPGRADE; -- results in a segfault when executed with multiple threads"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT BENCHMARK(NULL, 1); -- expected: 0, actual: NULL",
      "SELECT BENCHMARK(-1, 1); -- expected: 0, actual: NULL"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TEXT);",
      "INSERT IGNORE INTO t0(c0) VALUES(\"\\n123\");",
      "SELECT * FROM t0 WHERE COALESCE(t0.c0); -- expected: row is fetched, actual: no row is fetched",
      "SELECT * FROM t0 WHERE IFNULL(t0.c0, 1); -- expected: row is fetched, actual: no row is fetched"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TEXT);",
      "INSERT INTO t0(c0) VALUES(0.9);",
      "SELECT * FROM t0 WHERE t0.c0; -- expected: row is fetched, actual: row is not fetched"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 BIGINT UNSIGNED);",
      "INSERT INTO t0(c0) VALUES(NULL);",
      "SELECT * FROM t0 WHERE CAST(COALESCE(t0.c0, -1) AS UNSIGNED); -- expected: row is selected, actual: no row is selected",
      "SELECT * FROM t0 WHERE CAST(IFNULL(t0.c0, -1) AS UNSIGNED); -- expected: row is selected, actual: no row is selected"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT);",
      "INSERT INTO t0(c0) VALUES(-1);",
      "SELECT t0.c0 IN (1, CAST(t0.c0 AS UNSIGNED)) from t0; -- expected: 0, actual: 1"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TEXT);",
      "INSERT INTO t0(c0) VALUES(\"0.5\");",
      "SELECT * FROM t0 WHERE t0.c0 AND 1; -- expected: 0.5, actual: no row is fetched",
      "SELECT * FROM t0 WHERE t0.c0 OR 0; -- expected: 0.5, actual: no row is fetched",
      "SELECT * FROM t0 WHERE t0.c0 XOR 0;  -- expected: 0.5, actual: no row is fetched"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT '\\n1' & 1; -- expected: 1, actual: 0",
      "SELECT '\\n1' | 0; -- expected: 1, actual: 0",
      "SELECT '\\n1' ^ 1; -- expected: 0, actual: 1"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT);",
      "CREATE TABLE t1(c0 INT) ENGINE = MEMORY;",
      "INSERT INTO t0(c0) VALUES(0);",
      "INSERT INTO t1(c0) VALUES(-1);",
      "SELECT * FROM t0, t1 WHERE (CAST(t1.c0 AS UNSIGNED)) > (IFNULL(\"u\", t0.c0)); -- expected: row is fetched, actual: no row is fetched"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SET SESSION sort_buffer_size = 18446744073709551615;",
      "CREATE TABLE t0(c0 INT UNIQUE, c1 INT UNIQUE);",
      "INSERT INTO t0(c0) VALUES(1), (2), (3);",
      "SELECT * FROM t0 WHERE NOT((t0.c1 IS NULL) AND ((t0.c0) != (1))); -- unexpected: ERROR 5 (HY000): Out of memory (Needed 24 bytes)"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": ["SELECT \"a\" IN (0); -- expected: 0, actual: 1"],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT, c1 TEXT);",
      "INSERT INTO t0(c0, c1) VALUES(-1, \"a\");",
      "SELECT * FROM t0 WHERE t0.c1 < (t0.c0 & t0.c0) AND t0.c0 = -1; -- expected: fetches row, actual: does not fetch the row"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SET GLOBAL rbr_exec_mode = STRICT; -- unexpected: ERROR 1228 (HY000): Variable 'rbr_exec_mode' is a SESSION variable and can't be used with SET GLOBAL"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SET GLOBAL key_cache_division_limit = 100; -- unexpected: fails nondeterministically with ERROR 1210 (HY000): Incorrect arguments to SET"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TEXT);",
      "INSERT INTO t0(c0) VALUES (\"a\");",
      "SELECT * FROM t0 WHERE GREATEST((-1) & (-1), -t0.c0); -- expected: row is fetched, actual: row is not fetched"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT PRIMARY KEY, c1 INT);",
      "CREATE TABLE t1(c0 INT) INHERITS (t0);",
      "INSERT INTO t0(c0, c1) VALUES(0, 0);",
      "INSERT INTO t1(c0, c1) VALUES(0, 1);",
      "SELECT c0, c1 FROM t0 GROUP BY c0, c1; -- expected: 0|0 and 0|1, actual: 0|0"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 boolean UNIQUE);",
      "CREATE INDEX i0 ON t0((nullif(FALSE, TRUE)));",
      "INSERT INTO t0(c0) VALUES(TRUE);",
      "SELECT * FROM t0 WHERE nullif(FALSE, TRUE) OR t0.c0; -- expected: row is fetched, actual: ERROR:  index key does not match expected index column"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE TEMP TABLE t0(c0 INT GENERATED ALWAYS AS IDENTITY) PARTITION BY HASH((t0.c0));",
      "VACUUM FULL;",
      "DISCARD TEMP; -- unexpected: ERROR: cache lookup failed for type 0"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT);",
      "CREATE UNIQUE INDEX i0 ON t0(c0);",
      "ALTER TABLE t0 ADD PRIMARY KEY USING INDEX i0, ALTER c0 TYPE BIGINT;",
      "-- unexpected: ERROR: could not open relation with OID 43707388"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "-- requires another open transaction holding a snapshot",
      "CREATE TABLE t0(c0 TEXT);",
      "INSERT INTO t0(c0) VALUES('b'), ('a');",
      "ANALYZE;",
      "INSERT INTO t0(c0) VALUES (NULL);",
      "UPDATE t0 SET c0 = 'a';",
      "CREATE INDEX i0 ON t0(c0);",
      "SELECT * FROM t0 WHERE 'baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' > t0.c0; -- unexpected: ERROR: found unexpected null value in index \"i0\""
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 BOOLEAN, c1 BOOLEAN, UNIQUE(c1));",
      "CREATE STATISTICS s1 ON c0, c1 FROM t0;",
      "INSERT INTO t0(c0) VALUES(TRUE);",
      "ANALYZE t0;",
      "SELECT * FROM t0 WHERE (t0.c0 AND t0.c1) >= TRUE; -- ERROR:  negative bitmapset member not allowed"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INTEGER , c1 BOOLEAN);",
      "INSERT INTO t0(c0, c1) VALUES(1369652450, FALSE), (414515746, TRUE), (897778963, FALSE);",
      "CREATE UNIQUE INDEX i0 ON t0((1 / t0.c0)) WHERE ('-H') >= (t0.c1::TEXT) COLLATE \"C\";",
      "REINDEX TABLE CONCURRENTLY t0;",
      "ALTER TABLE t0 ALTER c1 TYPE TEXT; -- could not create unique index \"i0\" DETAIL:  Key ((1 / c0))=(0) is duplicated."
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 boolean);",
      "CREATE TABLE t1(c0 boolean);",
      "CREATE TABLE t2(c0 boolean) INHERITS(t0, t1);",
      "ALTER TABLE t0 ALTER c0 TYPE TEXT;",
      "UPDATE t1 SET c0 = TRUE; -- ERROR:  attribute \"c0\" of relation \"t2\"does not match parent's type"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0 REAL, c1);",
      "CREATE UNIQUE INDEX i0 ON t0(c1, 0 | c0);",
      "INSERT INTO t0(c0) VALUES (4750228396194493326), (0);",
      "UPDATE OR REPLACE t0 SET c0 = 'a', c1 = '';",
      "SELECT * FROM t0 ORDER BY t0.c1; -- unexpected: database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0, c1, c2, PRIMARY KEY (c0, c1));",
      "CREATE TABLE t1 (c2);",
      "INSERT INTO t0(c2) VALUES (0), (1), (3), (4), (5), (6), (7), (8), (9), (10), (11);",
      "INSERT INTO t0(c1) VALUES ('a');",
      "INSERT INTO t1(c2) VALUES (0);",
      "ANALYZE;",
      "SELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ON TRUE ORDER BY t0.c0; -- expected: |1|, |1|a, actual: |1|"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t1 (c1 , c2, c3, c4 , PRIMARY KEY (c4, c3));",
      "INSERT INTO t1(c3) VALUES (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (NULL), (1), (0);",
      "UPDATE t1 SET c2 = 0;",
      "INSERT INTO t1(c1) VALUES (0), (0), (NULL), (0), (0);",
      "ANALYZE t1;",
      "UPDATE t1 SET c3 = 1;",
      "SELECT DISTINCT * FROM t1 WHERE t1.c3 = 1; -- expected: |0|1|, 0||1|, ||1|, actual: |0|1|"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 UNIQUE, c1);",
      "INSERT INTO t0(c0, c1) VALUES (NULL, 1);",
      "SELECT MIN(t0.c0), t0.c1 FROM t0; -- expected: NULL | 1, actual: NULL | NULL"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0, c1);",
      "CREATE INDEX i0 ON t0(c1, c1 + 1 DESC);",
      "INSERT INTO t0(c0) VALUES (1);",
      "SELECT MIN(t0.c1), t0.c0 FROM t0 WHERE t0.c1 ISNULL; -- expected: NULL | 1, actual: NULL | NULL"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0, c1 TEXT);",
      "CREATE VIEW v0(c0) AS SELECT SUM(t0.c1) FROM t0;",
      "INSERT INTO t0(c0, c1) VALUES ('a', 1);",
      "SELECT * FROM v0, t0 WHERE t0.c1 <= v0.c0; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TEXT, c1);",
      "INSERT INTO t0(c0, c1) VALUES (-1, 0);",
      "CREATE VIEW v0(c0, c1) AS SELECT t0.c0, AVG(t0.c1) FROM t0;",
      "SELECT * FROM v0 WHERE v0.c1 < v0.c0; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TEXT);",
      "CREATE VIEW v0(c0) AS SELECT t0.c0 FROM t0;",
      "INSERT INTO t0(c0) VALUES ('0');",
      "SELECT 0 IN (c0) FROM v0; -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 UNIQUE, c1);",
      "INSERT INTO t0(c1) VALUES (0);",
      "INSERT INTO t0(c0) VALUES (0);",
      "CREATE VIEW v0(c0, c1) AS SELECT t0.c1, t0.c0 FROM t0 WHERE CAST(t0.rowid AS INT) = 1;",
      "SELECT v0.c0, MIN(v0.c1) FROM v0; -- expected: 0|, actual: |"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "INSERT INTO t0(c0) VALUES (0);",
      "CREATE INDEX i0 ON t0(NULL > c0) WHERE (NULL NOT NULL);",
      "SELECT * FROM t0 WHERE ((NULL IS FALSE) IS FALSE); -- expected: row is fetched: actual: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "INSERT INTO t0(c0) VALUES (0);",
      "SELECT * FROM t0 WHERE EXISTS (SELECT MIN(c0)  OVER (), CUME_DIST() OVER () FROM t0) BETWEEN 1 AND 1;"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE VIEW v0(c0) AS SELECT TYPEOF(1) FROM t0;",
      "INSERT INTO t0(c0) VALUES (0), (1);",
      "SELECT * FROM t0 LEFT JOIN v0 ON t0.c0 WHERE NOT(v0.c0 = 'a'); -- unexpected: fetches no row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE VIEW v0(c0) AS SELECT LOWER(CAST('1e500' AS TEXT)) FROM t0;",
      "INSERT INTO t0(c0) VALUES (NULL);",
      "SELECT v0.c0 FROM v0, t0 WHERE t0.rowid NOT IN (0, 0, v0.c0); -- expected: '1e500', actual: Inf"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0, c1);",
      "CREATE INDEX i0 ON t0(CAST(c0 AS NUMERIC));",
      "INSERT INTO t0(c0, c1) VALUES ('a', -1);",
      "SELECT * FROM t0 INDEXED BY i0 WHERE CAST(t0.c0 AS NUMERIC) > LOWER(t0.c1) GROUP BY t0.rowid; -- expected: row is fetched, actual: no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0, c1 NOT NULL DEFAULT 1, c2, PRIMARY KEY (c0, c1));",
      "INSERT INTO t0(c2) VALUES (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL);",
      "INSERT INTO t0(c2) VALUES ('a');",
      "ANALYZE t0;",
      "SELECT DISTINCT * FROM t0 WHERE NULL IS t0.c0; -- unexpected: |1|a is not part of the result set"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1 TEXT);",
      "INSERT INTO t0(c0, c1) VALUES (1, 'a');",
      "SELECT * FROM t0 WHERE '-1' BETWEEN 0 AND t0.c0; -- expected: 1|a, actual: no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TEXT UNIQUE, c1);",
      "INSERT INTO t0(c0) VALUES (-1);",
      "SELECT * FROM t0 WHERE - x'ce' >= t0.c0; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0);",
      "INSERT INTO t0(c0) VALUES ('a');",
      "SELECT * FROM t0 WHERE LIKELY(t0.rowid) <= '0'; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT UNIQUE);",
      "INSERT INTO t0(c0) VALUES (1);",
      "SELECT * FROM t0 WHERE '1' IN (t0.c0); -- unexpected: fetches row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "INSERT INTO t0(c0) VALUES (NULL);",
      "CREATE INDEX i0 ON t0(1) WHERE c0 NOT NULL;",
      "SELECT * FROM t0 WHERE (t0.c0 IS FALSE) IS FALSE; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c1);",
      "CREATE INDEX i0 ON t0(1) WHERE c1 NOTNULL;",
      "INSERT INTO t0(c1) VALUES (NULL);",
      "SELECT * FROM t0 WHERE t0.c1 IS FALSE BETWEEN FALSE AND TRUE; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0);",
      "CREATE INDEX i0 ON t0(1) WHERE c0 NOT NULL;",
      "INSERT INTO t0(c0) VALUES (NULL);",
      "SELECT * FROM t0 WHERE '' BETWEEN t0.c0 AND 1 IN (FALSE); -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 REAL UNIQUE, c1);",
      "CREATE UNIQUE INDEX i0 ON t0(0 || c1);",
      "INSERT INTO t0(c0, c1) VALUES (1, 2),  (2, 1);",
      "INSERT INTO t0(c0) VALUES (1) ON CONFLICT(c0) DO UPDATE SET c1=excluded.c0;",
      "REINDEX; -- unexpected: UNIQUE constraint failed: index 'i0'"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 REAL, c1 TEXT);",
      "CREATE INDEX i0 ON t0(+c0, c0);",
      "INSERT INTO t0(c0) VALUES(0);",
      "SELECT CAST(+ t0.c0 AS BLOB) LIKE 0 FROM t0; -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 REAL UNIQUE);",
      "INSERT INTO t0(c0) VALUES(2.07093491255203046E18);",
      "SELECT * FROM t0 WHERE c0 IN ('2070934912552030444'); -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TEXT, c1 REAL, c2, PRIMARY KEY(c2, c0, c1));",
      "CREATE INDEX i0 ON t0(c1 IN (c0));",
      "INSERT INTO t0(c0, c2) VALUES (0, NULL) ON CONFLICT(c2, c1, c0) DO NOTHING;",
      "UPDATE t0 SET c2 = x'';",
      "SELECT * FROM t0 WHERE t0.c2 IS NULL; -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 COLLATE NOCASE, c1);",
      "CREATE INDEX i0 ON t0(0) WHERE c0 >= c1;",
      "REPLACE INTO t0 VALUES('a', 'B');",
      "SELECT * FROM t0 WHERE t0.c1 <= t0.c0; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "INSERT INTO t0(c0) VALUES('');",
      "CREATE VIEW v2(c0, c1) AS SELECT 'B' COLLATE NOCASE, 'a' FROM t0 ORDER BY t0.c0;",
      "SELECT SUM(count) FROM (SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2); -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 COLLATE NOCASE);",
      "INSERT INTO t0(c0) VALUES ('B');",
      "CREATE VIEW v0(c0, c1) AS SELECT DISTINCT t0.c0, 'a' FROM t0;",
      "SELECT v0.c1 >= v0.c0 FROM v0; -- actual: 1, expected: 0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 UNIQUE);",
      "INSERT INTO t0 VALUES (-1);",
      "SELECT * FROM t0 WHERE t0.c0 GLOB '-*'; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 PRIMARY KEY, c1);",
      "INSERT INTO t0(c0) VALUES (x'bb'), (0);",
      "SELECT COUNT(*) FROM t0 WHERE INSTR(x'aabb', t0.c0) ORDER BY t0.c0, t0.c1; -- 1",
      "SELECT * FROM t0 WHERE INSTR(x'aabb', t0.c0) ORDER BY t0.c0, t0.c1; -- no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 integer, c1 integer GENERATED ALWAYS AS (t0.c0) STORED);",
      "CREATE TABLE t1(LIKE t0 INCLUDING DEFAULTS);",
      "INSERT INTO t1(c0) VALUES(NULL);"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "INSERT INTO t0(c0) VALUES (0);",
      "CREATE VIEW v0(c0) AS SELECT t0.rowid FROM t0 ORDER BY 1;",
      "SELECT COUNT(*) FROM v0 WHERE ABS('1') = v0.c0; -- expected: 1, actual: 0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
      "BEGIN TRANSACTION;",
      "INSERT INTO vt0(c0) VALUES (NULL);",
      "ALTER TABLE t0 ADD COLUMN c5 REAL;",
      "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- unexpected: database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE vt0 USING fts5(a);",
      "PRAGMA reverse_unordered_selects = true;",
      "INSERT INTO vt0 VALUES('365062398'), (0), (0);",
      "INSERT INTO vt1(vt1, rank) VALUES('pgsz', '38');",
      "UPDATE vt0 SET a = 399905135; -- unexpected: database disk image is malformed",
      "INSERT INTO vt1(vt1) VALUES('integrity-check');"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
      "INSERT INTO vt0(c0) VALUES (NULL);",
      "BEGIN TRANSACTION;",
      "INSERT INTO vt0(vt0) VALUES('rebuild');",
      "INSERT INTO vt0(vt0) VALUES('rebuild');",
      "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0, c1);",
      "INSERT INTO vt0(vt0, rank) VALUES('pgsz', '70000');",
      "INSERT INTO vt0(c0) VALUES (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0);",
      "UPDATE vt0 SET c1 = 'T,D&p^y/7#3*v<b<4j7|f';",
      "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA reverse_unordered_selects = true;",
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
      "INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 2000);",
      "INSERT INTO vt0(vt0, rank) VALUES('automerge', 0);",
      "INSERT INTO vt0(c0) VALUES (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0),(0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0);",
      "INSERT INTO vt0(vt0) VALUES('rebuild'); -- database or disk is full"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c1);",
      "CREATE TABLE t1(c0);",
      "CREATE VIEW v0 AS SELECT c1 FROM t1 LEFT JOIN t0;",
      "INSERT INTO t1 VALUES (1);",
      "SELECT * FROM v0 WHERE NOT(v0.c1 IS FALSE); -- expected: row is fetched, actual: no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE TABLE t1(c1);",
      "INSERT INTO t0(c0) VALUES(0);",
      "CREATE VIEW v0(c0) AS SELECT t1.c1 FROM t0 LEFT JOIN t1;",
      "SELECT * FROM v0 WHERE v0.c0 NOTNULL NOTNULL; -- expected: row is fetched, actual: no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE vt0 USING fts4(c0, order=DESC);",
      "INSERT INTO vt0(c0) VALUES (0), (0);",
      "INSERT INTO vt0(vt0) VALUES('integrity-check'); --database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE vt0 USING fts4(c0, prefix=1);",
      "BEGIN;",
      "INSERT INTO vt0 VALUES (0);",
      "INSERT INTO vt0(vt0) VALUES('optimize');",
      "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE vt0 USING fts4(c0);",
      "INSERT INTO vt0 VALUES (x'00');",
      "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA recursive_triggers = true;",
      "CREATE TABLE t0(c0 UNIQUE);",
      "CREATE TRIGGER tr0 AFTER DELETE ON t0 BEGIN INSERT INTO t0 VALUES(0); END;",
      "INSERT OR REPLACE INTO t0(c0) VALUES(0), (0);",
      "REINDEX; -- UNIQUE constraint failed: t0.c0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE vt0 USING fts4(c0, order=DESC);",
      "INSERT INTO vt0(c0) VALUES (0);",
      "INSERT INTO vt0(c0) VALUES (0);",
      "UPDATE vt0 SET c0 = NULL;",
      "INSERT INTO vt0(vt0) VALUES('merge=1,4'); -- unexpected: does not terminate"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 COLLATE NOCASE, c1);",
      "INSERT INTO t0 VALUES('a', 'A');",
      "SELECT * FROM t0 WHERE (+ t0.c1, 1) >= (t0.c0, 1); -- expected: row is not fetched, actual: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 COLLATE NOCASE, c1);",
      "INSERT INTO t0 VALUES('a', 'A');",
      "SELECT * FROM t0 WHERE (+ t0.c1, 1) >= (t0.c0, 1); -- expected: row is not fetched, actual: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TEXT PRIMARY KEY);",
      "INSERT INTO t0(c0) VALUES ('');",
      "SELECT * FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE); -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 UNIQUE);",
      "INSERT INTO t0(c0) VALUES('a');",
      "SELECT * FROM t0 WHERE (t0.c0, 0) < ('B' COLLATE NOCASE, 0); -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA recursive_triggers = true;",
      "CREATE TABLE t0(c0, c1, c2 UNIQUE);",
      "CREATE UNIQUE INDEX i0 ON t0(c1) WHERE c0;",
      "CREATE TRIGGER tr0 AFTER DELETE ON t0 BEGIN DELETE FROM t0; END;",
      "INSERT INTO t0(c2) VALUES(-1572226132);",
      "INSERT INTO t0(c0) VALUES(1), (1);",
      "REPLACE INTO t0(c0, c1, c2) VALUES(2, 0, 0xffffffffa249bbac); -- unexpected: SEGFAULT"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0, tokenize = \"ascii\", prefix = 1);",
      "INSERT INTO vt0(c0) VALUES (x'd1');",
      "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- unexpected error: database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA temp.recursive_triggers = true;",
      "CREATE TABLE t0(c0, c1 UNIQUE);",
      "CREATE TRIGGER c BEFORE DELETE ON t0;",
      "BEGIN INSERT INTO t0(c1) VALUES(1);",
      "END;",
      "INSERT INTO t0(c1) VALUES(0);",
      "REPLACE INTO t0(c1) VALUES (0);",
      "SELECT t0.c1 BETWEEN 0 AND (CASE WHEN 1 THEN 1 ELSE t0.c0 END NOT NULL) FROM t0; -- expected: 1 and 1, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0, c1 TEXT GENERATED ALWAYS AS (1) UNIQUE);",
      "INSERT INTO t0(c0) VALUES (1);",
      "REINDEX;",
      "INSERT INTO t0(c0) VALUES (0);",
      "REINDEX; -- unexpected: UNIQUE constraint failed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INTEGER PRIMARY KEY GENERATED ALWAYS AS(1), c1 UNIQUE GENERATED ALWAYS AS(1), c2 UNIQUE);",
      "INSERT INTO t0 VALUES(NULL); -- Segmentation fault"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA temp_store = MEMORY;",
      "CREATE TEMP TABLE t0(c0, c1 AS(1) CHECK(NULL) UNIQUE NOT NULL, c2 CHECK(1.0) PRIMARY KEY) WITHOUT ROWID;",
      "CREATE UNIQUE INDEX e ON t0(CAST(0.0 AS INT)) WHERE 0;",
      "REINDEX;",
      "INSERT INTO t0(c2) VALUES (0), (1);",
      "REPLACE INTO t0(c2, c0) VALUES (0, 0), (x'9b', NULL);",
      "UPDATE t0 SET c2 = 0; -- Segmentation fault"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 AS(1));",
      "CREATE INDEX i0 ON t0(0 DESC);",
      "PRAGMA legacy_file_format = true;",
      "VACUUM; -- table vacuum_db.t0 has 0 columns but 1 values were supplied"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 AS(1), c1);",
      "PRAGMA legacy_file_format = true;",
      "CREATE INDEX i0 ON t0(0 DESC);",
      "VACUUM; -- table vacuum_db.t0 has 1 columns but 2 values were supplied"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 AS(TYPEOF(c1)), c1);",
      "INSERT INTO t0(c1) VALUES(0);",
      "VACUUM; -- table vacuum_db.t0 has 1 columns but 2 values were supplied"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0, c1, c2 AS(1), PRIMARY KEY(c0) FOREIGN KEY(c2) REFERENCES t0);",
      "CREATE VIRTUAL TABLE vt0 USING fts4;",
      "CREATE INDEX i0 ON t0(c2, 0 BETWEEN '' AND c1 COLLATE BINARY, CASE '' WHEN c3 THEN 0 WHEN 0 THEN 0 WHEN '' THEN 0 WHEN 0 THEN c0 ELSE c1 END);",
      "INSERT INTO t0 VALUES (0, 0), ('', 0);",
      "PRAGMA foreign_keys = true;",
      "ANALYZE;",
      "UPDATE t0 SET c1 = c0; -- unexpected: Segmentation fault"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0, c1 a UNIQUE AS (1), c2, c3, FOREIGN KEY(c3) REFERENCES t0(c1));",
      "CREATE VIRTUAL TABLE vt0 USING fts4(c0);",
      "PRAGMA foreign_keys = true;",
      "INSERT INTO vt0 VALUES (0);",
      "REPLACE INTO t0(c3, c2, c0) VALUES (0, 0, 0), (0, 0, 0); -- Segmentation fault"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE INDEX i0 ON t0(0) WHERE c0 GLOB c0;",
      "INSERT INTO t0 VALUES (0);",
      "CREATE UNIQUE INDEX i1 ON t0(0);",
      "CREATE UNIQUE INDEX i2 ON t0(0);",
      "REPLACE INTO t0 VALUES(0);",
      "SELECT COUNT(*) FROM t0 WHERE t0.c0 GLOB t0.c0; -- expected: 1, actual: 2"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE TABLE t1(c0);",
      "INSERT INTO t1(c0) VALUES (0);",
      "CREATE INDEX i0 ON t0(0) WHERE NULL IN (c0);",
      "CREATE VIEW v0(c0) AS SELECT t0.c0 FROM t1 LEFT JOIN t0;",
      "SELECT COUNT(*) FROM v0 WHERE NULL IN (v0.c0); -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 CHECK(ABS(-9223372036854775808)));",
      "PRAGMA integrity_check; -- unexpected: integer overflow"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE TABLE t1(c0);",
      "CREATE VIEW v0(c0) AS SELECT t0.c0 FROM t1 LEFT JOIN t0;",
      "INSERT INTO t1(c0) VALUES (0);",
      "SELECT * FROM v0 WHERE (v0.c0, x'') != (NULL, 0); -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 NOT NULL AS(c1), c1);",
      "REPLACE INTO t0(c1) VALUES(NULL); -- Segmentation fault"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0 GENERATED ALWAYS AS (1), c1 UNIQUE, c2 UNIQUE);",
      "INSERT INTO t0(c1) VALUES (1);",
      "SELECT * FROM t0 WHERE 0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1; -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 AS ((c4, 9, c4) < ('a', c1, 1)), c1 AS (1) NOT NULL, c2, c3 CHECK  ((x'56', 0) = (c1, 0)), c4 NOT NULL);",
      "PRAGMA integrity_check;",
      "INSERT INTO t0 VALUES (0, 0, 0), (0, 0, 0); -- unexpected: Segmentation fault"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0, c1 AS(c0 + c2), c2 AS(c1) CHECK(c2));",
      "UPDATE t0 SET c0 = NULL; -- Segmentation fault"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0, c1 UNIQUE COLLATE NOCASE, PRIMARY KEY(c1, c1)) WITHOUT ROWID;",
      "INSERT INTO t0(c1) VALUES(0);",
      "VACUUM; -- unexpected: database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
      "INSERT INTO t0(c0) VALUES (1), (0);",
      "INSERT INTO vt0(c0) VALUES (0), (0);",
      "CREATE VIEW v0 AS SELECT DISTINCT t0.c0 FROM vt0, t0 ORDER BY vt0.rowid;",
      "SELECT * FROM v0; -- unexpected: 4 rows are fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TEMP TABLE t0(c1 INT PRIMARY KEY) ON COMMIT DELETE ROWS;",
      "REINDEX TABLE CONCURRENTLY t0; -- unexpected: ERROR:  index \"t0_pkey_ccnew\" already contains data"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 CHAR(2) COLLATE \"C\", c1 CHAR(2) COLLATE \"POSIX\");",
      "INSERT INTO t0 VALUES('', '');",
      "SELECT * FROM t0 WHERE t0.c1 NOT IN (t0.c0); -- unexpected: cache lookup failed for collation 0"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 boolean, c1 boolean, c2 boolean);",
      "INSERT INTO t0 VALUES(FALSE, FALSE, FALSE);",
      "CREATE STATISTICS s0 ON c0, c2 FROM t0;",
      "ANALYZE;",
      "SELECT * FROM t0 WHERE t0.c2 OR t0.c1 OR t0.c0; -- TRAP: FailedAssertion(\"clauses != NIL\", File: \"mcv.c\", Line: 1551)"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TEXT);",
      "CREATE INDEX i0 ON t0(c0 bpchar_ops);",
      "SELECT * FROM t0 WHERE t0.c0 LIKE ''; -- ERROR:  no = operator for opfamily 426"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 int);",
      "CREATE VIEW v0 AS SELECT * FROM t0;",
      "CREATE OR REPLACE VIEW v0 AS SELECT * FROM v0;",
      "SELECT * FROM information_schema.tables; -- server process (PID 2461) was terminated by signal 11: Segmentation fault"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE TEMP TABLE t0(c0 int) ON COMMIT DELETE ROWS;",
      "CREATE INDEX i0 ON t0(bit_length('')); -- Segmentation fault"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE TABLE t1(c0);",
      "CREATE INDEX i0 ON t0(1) WHERE c0 ISNULL;",
      "INSERT INTO t0(c0) VALUES (1);",
      "INSERT INTO t1(c0) VALUES (1);",
      "SELECT * FROM t1 LEFT JOIN t0 WHERE t0.c0 ISNULL; -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TEXT COLLATE \"POSIX\");",
      "CREATE VIEW v0(c0) AS (SELECT (t0.c0 COLLATE \"C\")::INT FROM t0); -- FailedAssertion(\"!OidIsValid(def->collOid)\", File: \"view.c\", Line: 89)"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
      "INSERT INTO rt0(c2) VALUES(NULL);",
      "SELECT * FROM rt0 WHERE rt0.c2 >= 'a'; -- unexpected: fetches row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
      "INSERT INTO rt0(c0) VALUES(0);",
      "SELECT * FROM rt0 WHERE rt0.c0 = NULL; -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE rt0 USING rtree(c0, a, b);",
      "CREATE VIRTUAL TABLE rt1 USING rtree(c0, a, b);",
      "INSERT INTO rt1(c0) VALUES (x'00');",
      "INSERT INTO rt0(c0) VALUES ('a');",
      "SELECT * FROM rt1, rt0 WHERE rt0.c0 = CAST(rt1.c0 AS TEXT); -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
      "INSERT INTO rt0(c2) VALUES(NULL);",
      "INSERT INTO t0 VALUES(0);",
      "SELECT * FROM rt0, t0 WHERE (t0.c0, 0) > (rt0.c2, 0); -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2 INT);",
      "INSERT INTO rt0(c2) VALUES(0);",
      "SELECT * FROM rt0 WHERE '0' = rt0.c2; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
      "INSERT INTO rt0(c1) VALUES(0);",
      "SELECT * FROM rt0 WHERE rt0.c1 > '-1'; -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2, +c3 NOT NULL);",
      "INSERT INTO rt0(c3) VALUES(NULL); -- unexpected: inserting NULL succeeds",
      "SELECT 0 in (rt0.c3) ISNULL FROM rt0; -- expected: 1, actual: 0"
    ],
    "dbms": "SQLite"
  },
  { "statements": ["CREATE VIRTUAL TABLE vt0 USING rtree;"], "dbms": "SQLite" },
  {
    "statements": [
      "PRAGMA cache_size = 100000;",
      "PRAGMA foreign_keys = true;",
      "CREATE TEMP TABLE t0(c0, c1 INTEGER PRIMARY KEY AUTOINCREMENT CHECK (c0), c2 BLOB NOT NULL CHECK (LTRIM(1)) UNIQUE DEFAULT '0000000000000');",
      "COLLATE BINARY, c3 BLOB UNIQUE NOT NULL ON CONFLICT ABORT CHECK ((''IN (c0, NULL, c1))) GENERATED ALWAYS AS (1), FOREIGN KEY(c1) REFERENCES t0(c2) ON DELETE CASCADE);",
      "CREATE UNIQUE INDEX i0 ON t0(0, 0, 0);",
      "CREATE UNIQUE INDEX i1 ON t0(0, 0, 0);",
      "CREATE UNIQUE INDEX i2 ON t0(0, 0, c1);",
      "CREATE UNIQUE INDEX i3 ON t0(0, 0, c1);",
      "CREATE UNIQUE INDEX i4 ON t0(c0, 0, c2);",
      "CREATE INDEX i5 ON t0(0, CASE WHEN 1 THEN 1 WHEN c2 THEN c1 END, 0);",
      "VACUUM;",
      "INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0); -- segfault"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 AS (1), c1);",
      "CREATE TABLE t1(c0);",
      "SELECT * FROM t0, t1 WHERE t0.c0 == 0; -- out of memory"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0 (c0, c1 NOT NULL GENERATED ALWAYS AS (c0 = 0));",
      "INSERT INTO t0(c0) VALUES (0);",
      "PRAGMA integrity_check; -- hangs"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE VIRTUAL TABLE vt0 USING rtree(c0, c1, c2);",
      "INSERT INTO t0(c0) VALUES(0);",
      "SELECT * FROM t0 LEFT JOIN vt0 ON c2 IN (0) WHERE c1 IN (NULL);"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 AS (0 = UNLIKELY(c1)) UNIQUE, c1 TEXT);",
      "INSERT INTO t0(c1) VALUES (1), (0);",
      "REINDEX; -- UNIQUE constraint failed: t0.c0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA encoding = 'UTF-16';",
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
      "INSERT INTO vt0 VALUES (x'46f0');",
      "UPDATE vt0 SET c0=NULL;",
      "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 AS(1 >= 1), c1 UNIQUE AS(TYPEOF(c0)), c2);",
      "CREATE VIRTUAL TABLE t1 USING fts4;",
      "INSERT INTO t0 VALUES(0);",
      "REINDEX; -- segfault"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE TABLE t1(c0, c1 AS(1));",
      "INSERT INTO t0 VALUES(0);",
      "SELECT t1.c1 IS TRUE FROM t0 LEFT JOIN t1; -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
      "INSERT INTO t0(c1) VALUES(0), (0);",
      "UPDATE t0 SET c0 = (SELECT 1 FROM t0); -- unexpected: database table is locked"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE TABLE t1(c0, c1 UNIQUE);",
      "INSERT INTO t0(c0) VALUES(NULL);",
      "SELECT COUNT(*) FROM t0, t1 WHERE (SELECT AVG(0) FILTER(WHERE t1.c1)); -- segmentation fault"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 REAL AS(1) UNIQUE, c1 INT);",
      "INSERT INTO t0 VALUES('');",
      "SELECT * FROM t0 WHERE (1 BETWEEN CAST(t0.c0 AS TEXT) AND t0.c0); -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA encoding = 'UTF-16';",
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
      "INSERT INTO vt0 VALUES (x'3078');",
      "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE vt0 USING fts4(c0, languageid=\"lid\");",
      "INSERT INTO vt0 VALUES (0), (1);",
      "BEGIN;",
      "UPDATE vt0 SET lid = 1;",
      "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- unexpected: database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA encoding = 'UTF16';",
      "CREATE TABLE t0(c0 REAL, c1);",
      "INSERT INTO t0(c0) VALUES (''), (0);",
      "CREATE INDEX i0 ON t0(c1) WHERE c0 GLOB 3;",
      "UPDATE t0 SET c1=0; -- sqlite3.c:75871: sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Str)==0 || (pMem->n==pX->n && pMem->z==pX->z)' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA locking_mode = EXCLUSIVE;",
      "PRAGMA journal_mode = PERSIST;",
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
      "INSERT INTO vt0(vt0) VALUES('integrity-check');",
      "INSERT INTO vt0(vt0, rank) VALUES('usermerge', 2); -- sqlite3.c:213961: fts5StructureRead: Assertion `p->iStructVersion!=0' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 UNIQUE);",
      "INSERT INTO t0 VALUES(0);",
      "SELECT * FROM t0 WHERE (0, t0.c0) IN(SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0); -- sqlite3.c:87244: sqlite3VdbeExec: Assertion `memIsValid(pRec)' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 UNIQUE);",
      "SELECT * FROM t0 WHERE(c0, 0) IN(SELECT FIRST_VALUE(0) OVER(), 0); -- Segmentation fault"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 CHECK(c1 IN(c1)), c1 INT);",
      "INSERT INTO t0(c1) VALUES('0'); -- sqlite3.c:86300: sqlite3VdbeExec: Assertion `flags3==pIn3->flags' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE INDEX i0 ON t0((c0 NOTNULL) COLLATE BINARY);",
      "SELECT * FROM t0 WHERE(c0 NOTNULL) COLLATE BINARY BETWEEN 0 AND c0; -- sqlite3.c:98025: sqlite3ExprSkipCollateAndLikely: Assertion `pExpr->op==TK_COLLATE' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
      "CREATE TABLE t0(c0);",
      "CREATE VIEW v0(c0) AS SELECT 0 GROUP BY 1;",
      "SELECT * FROM v0, t0 LEFT JOIN vt0 ON vt0.c0 MATCH 1 WHERE v0.c0 == 0; -- sqlite3.c:143296: constructAutomaticIndex: Assertion `!ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable!=pSrc->iCursor || pLoop->prereq!=0' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TEXT, CHECK(c0 IN (c0)));",
      "INSERT INTO t0 VALUES(0);",
      "UPDATE t0 SET c0 = 0; -- sqlite3.c:86323: sqlite3VdbeExec: Assertion `pIn1!=pIn3' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT, CHECK(CASE c0 WHEN c0 THEN 0 END));",
      "INSERT INTO t0 VALUES('0'); -- sqlite3.c:86300: sqlite3VdbeExec: Assertion `flags3==pIn3->flags' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA encoding = 'UTF16';",
      "CREATE VIRTUAL TABLE t0 USING fts5(c0);",
      "INSERT INTO t0(c0) VALUES (x'00');",
      "SELECT * FROM t0 WHERE CAST(SUBSTR(c0, 0) AS TEXT) > 0; -- sqlite3.c:81076: sqlite3MemCompare: Assertion `pMem1->enc==pMem2->enc || pMem1->db->mallocFailed' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA encoding = 'UTF16';",
      "CREATE TABLE t0(c0 TEXT);",
      "CREATE INDEX i0 ON t0(0 LIKE COALESCE(c0, 0));",
      "INSERT INTO t0(c0) VALUES (0), (0); -- sqlite3.c:75871: sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Str)==0 || (pMem->n==pX->n && pMem->z==pX->z)' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 UNIQUE);",
      "SELECT * FROM t0 WHERE (t0.c0, 1) IN(SELECT NTILE(1) OVER(), 0 FROM t0); -- sqlite3.c:90197: sqlite3VdbeExec: Assertion `pC!=0' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "CREATE TABLE t1(c0);",
      "SELECT * FROM t0 LEFT JOIN t1 WHERE (t1.c0 BETWEEN 0 AND 0) > ('' AND t0.c0); -- sqlite3.c:103271: impliesNotNullRow: Assertion `pWalker->eCode==0' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
      "CREATE TABLE t0(c0);",
      "INSERT INTO t0 VALUES (0), (1);",
      "INSERT INTO rt0(c0) VALUES (0), (1);",
      "CREATE VIEW v0 AS SELECT 0 LIMIT 0;",
      "SELECT * FROM t0 LEFT JOIN rt0 INNER JOIN v0; -- sqlite3.c:185720: rtreeRelease: Assertion `pRtree->nNodeRef==0 || pRtree->bCorrupt' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE vt1 USING fts5(c1, c2, prefix = 1, tokenize = \"porter ascii\");",
      "INSERT INTO vt1 VALUES (x'e4', '+\u452c+');",
      "INSERT INTO vt1(vt1) VALUES('integrity-check'); -- database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TEXT, CHECK(c0 BETWEEN 0 AND +c0));",
      "INSERT INTO t0 VALUES (0);",
      "UPDATE t0 SET c0 = 0; -- sqlite3.c:86402: sqlite3VdbeExec: Assertion `pIn1!=pIn3' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
      "INSERT INTO rt0(c0) VALUES (0), (1), (2);",
      "UPDATE rt0 SET c0 = 0 WHERE(SELECT ROW_NUMBER() OVER() FROM rt0); -- database table is locked"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0, prefix = 71, tokenize = \"porter ascii\", prefix = 9);",
      "BEGIN;",
      "INSERT INTO vt0(c0) VALUES (x'e9');",
      "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- sqlite3.c:213028: sqlite3Fts5HashScanNext: Assertion `!sqlite3Fts5HashScanEof(p)' failed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA encoding = 'UTF-16';",
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0, c1);",
      "INSERT INTO vt0(vt0, rank) VALUES('pgsz', '37');",
      "INSERT INTO vt0(c0, c1) VALUES (0.66077, 1957391816);",
      "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- unexpected: database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
      "CREATE VIRTUAL TABLE vt1 USING fts4(c0);",
      "INSERT INTO vt1(c0) VALUES(0);",
      "BEGIN;",
      "UPDATE vt1 SET c0 = 0;",
      "INSERT INTO vt1(c0) VALUES (0), (0);",
      "UPDATE vt0 SET c0 = 0;",
      "INSERT INTO vt1(c0) VALUES (0);",
      "UPDATE vt1 SET c0 = 0;",
      "INSERT INTO vt1(vt1) VALUES('automerge=1');",
      "UPDATE vt1 SET c0 = 0;",
      "DROP TABLE vt1; -- sqlite3.c:219981: fts5CheckTransactionState: Assertion `iSavepoint<=p->ts.iSavepoint' failed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
      "SELECT * FROM t0 WHERE ((0, 0) IN (SELECT COUNT(*), LAG(5) OVER(PARTITION BY 0) FROM t0), 0) <= (t0.c1, 0); -- sqlite3.c:98053: sqlite3TableColumnAffinity: Assertion `iCol<pTab->nCol' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 UNIQUE AS(0), c1, c2);",
      "INSERT INTO t0(c1) VALUES(0);",
      "UPDATE t0 SET c1 = 0, c2 = 0 WHERE(c0) >= 0; -- sqlite3.c:72305: sqlite3BtreeInsert: Assertion `pCur->curFlags & BTCF_ValidNKey' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 PRIMARY KEY, c1, c2 UNIQUE) WITHOUT ROWID;",
      "INSERT OR FAIL INTO t0(c2) VALUES (0), (NULL) ON CONFLICT(c2) DO UPDATE SET c1 = c0; -- sqlite3.c:108474: sqlite3FinishCoding: Assertion `!pParse->isMultiWrite || sqlite3VdbeAssertMayAbort(v, pParse->mayAbort)' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA locking_mode = EXCLUSIVE;",
      "PRAGMA journal_mode = WAL;",
      "PRAGMA locking_mode = NORMAL;",
      "PRAGMA integrity_check;",
      "PRAGMA journal_mode = MEMORY; -- sqlite3.c:51926: assert_pager_state: Assertion `pPager->changeCountDone==0 || pPager->eLock>=RESERVED_LOCK' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA encoding = 'UTF-16';",
      "CREATE VIRTUAL TABLE vt0 USING fts4(c0);",
      "INSERT INTO vt0 VALUES ('\ufeff');",
      "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 NOT NULL DEFAULT '', c1 AS(c0) NOT NULL);",
      "REPLACE INTO t0(c0) VALUES(NULL); -- sqlite3.c:85112: sqlite3VdbeExec: Assertion `memIsValid(&aMem[pOp->p1])' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "SELECT (0, 0) IN(SELECT MIN(c0), NTILE(0) OVER()) FROM t0; -- sqlite3.c:103486: exprSrcCount: Assertion `0' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 NOT NULL DEFAULT 1, c1 AS(c0) UNIQUE);",
      "REPLACE INTO t0 VALUES(NULL); -- sqlite3.c:87334: sqlite3VdbeExec: Assertion `memIsValid(pRec)' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA foreign_keys = true;",
      "CREATE TABLE t0(c0 INT AS(2) UNIQUE, c1 TEXT UNIQUE, FOREIGN KEY(c0) REFERENCES t0(c1));",
      "INSERT INTO t0(c1) VALUES(0.16334143182538696), (0); -- sqlite3.c:75926: sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Real)==0 || pMem->u.r==pX->u.r' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA recursive_triggers = true;",
      "CREATE TABLE t0(c0 UNIQUE ON CONFLICT REPLACE, c1, c2);",
      "CREATE INDEX i0 ON t0(c2);",
      "INSERT INTO t0(c0) VALUES (0);",
      "CREATE TRIGGER tr0 DELETE ON t0 BEGIN",
      "UPDATE t0 SET c2 = c0;",
      "END;",
      "INSERT INTO t0(c0, c2) VALUES(4, 0), (9, 0);",
      "UPDATE t0 SET c0 = 0;",
      "SELECT * FROM t0 WHERE x'' > t0.c2 GROUP BY c1; -- database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0, c1);",
      "CREATE VIRTUAL TABLE vt1 USING fts5(c0);",
      "INSERT INTO vt1(c0) VALUES ('');",
      "SELECT * FROM vt1 NATURAL JOIN vt0 WHERE vt0.c1 MATCH 'a'; -- parse error in rank function:"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 CHECK(((0, 0) > (0, c0))));",
      "INSERT INTO t0(c0) VALUES(0) ON CONFLICT(c0) DO UPDATE SET c0 = 3; -- sqlite3.c:98717: codeVectorCompare: Assertion `0' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA foreign_keys = true;",
      "CREATE TABLE t0(c0 TEXT PRIMARY KEY, c1 INT UNIQUE REFERENCES t0 CHECK(CAST(c1 AS INT) BETWEEN 0 AND CASE WHEN 1 THEN c0 END));",
      "REPLACE INTO t0(c0, c1) VALUES(0.7675826647230917, 0), (0, x''); -- sqlite3.c:75952: sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Real)==0 || pMem->u.r==pX->u.r' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA encoding = 'UTF16';",
      "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
      "INSERT INTO vt0 VALUES (SUBSTR(x'37', ''));",
      "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE stat USING dbstat;",
      "SELECT * FROM stat WHERE stat.aggregate == NULL; -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIRTUAL TABLE stat USING dbstat;",
      "SELECT * FROM stat WHERE stat.name = NULL; -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0);",
      "INSERT INTO t0 VALUES('0');",
      "CREATE VIEW v0(c0) AS SELECT CAST(0 AS INT) FROM t0;",
      "SELECT * FROM t0, v0 WHERE 0 >= t0.c0 AND t0.c0 = v0.c0; -- unexpected: fetches row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA encoding = 'UTF16be';",
      "CREATE TABLE t0(c0, c1);",
      "INSERT INTO t0(c0) VALUES (x'00');",
      "CREATE INDEX i0 ON t0(c0 COLLATE BINARY);",
      "INSERT INTO t0(c0) VALUES (1);",
      "SELECT COUNT(*) FROM t0 WHERE SUBSTR(t0.c0, ','); -- expected: 1, actual: 2"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 REAL, c1 REAL GENERATED ALWAYS AS (c0));",
      "INSERT INTO t0(c0) VALUES (1);",
      "SELECT * FROM t0 GROUP BY c0; -- expected: 1.0|1.0, actual: 1.0|1",
      "SELECT * FROM t0; -- 1.0|1.0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "PRAGMA encoding = 'UTF-16';",
      "CREATE TABLE t0(c0 TEXT);",
      "INSERT INTO t0(c0) VALUES ('\uc706'), (1);",
      "SELECT MAX(CASE 1 WHEN 1 THEN t0.c0 END) FROM t0; -- \uc706",
      "SELECT MAX(t0.c0) FROM t0; -- 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT HEX(MIN(a)) FROM (SELECT CHAR(0, 1) COLLATE NOCASE as a UNION SELECT CHAR(0, 0) as a); -- 0000",
      "SELECT HEX(MIN(a)) FROM (SELECT CHAR(0, 0) COLLATE NOCASE as a UNION SELECT CHAR(0, 1) as a); -- 0001"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT);",
      "CREATE TABLE t1(c0 DOUBLE);",
      "INSERT INTO t0 VALUES(0);",
      "INSERT INTO t1 VALUES('-0');",
      "SELECT * FROM t0, t1 WHERE t0.c0 = t1.c0; -- expected: {0, -0}, actual: {}"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT UNSIGNED);",
      "INSERT INTO t0(c0) VALUES(0);",
      "SELECT * FROM t0 WHERE 0.9 > t0.c0; -- expected: {0}, actual: {}"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT, c1 INT UNIQUE);",
      "INSERT INTO t0(c1) VALUES(1);",
      "SELECT * FROM t0 WHERE t0.c1 BETWEEN 0 AND (\"\\n2\"); -- expected: {NULL, 1}, actual: {}"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT UNIQUE);",
      "INSERT INTO t0(c0) VALUES(0);",
      "SELECT * FROM t0 WHERE t0.c0 BETWEEN 18446744073561222871 AND 0; -- expected: {0}, actual: {}?"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT);",
      "INSERT INTO t0(c0) VALUES (0);",
      "SELECT * FROM t0 WHERE 0.9 > t0.c0; -- expected: {0}, actual: {}"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 FLOAT UNIQUE);",
      "INSERT INTO t0(c0) VALUES (0);",
      "SELECT * FROM t0 WHERE t0.c0 BETWEEN 0 AND '1e500'; -- expected: {0}, actual: {}"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 TEXT);",
      "INSERT INTO t0(c0) VALUES(0);",
      "CREATE INDEX i0 ON t0(c0(1));",
      "SELECT * FROM t0 WHERE t0.c0 NOT BETWEEN '\u05a3a' AND NULL; -- expected: {0}, actual: {}"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "CREATE TABLE t0(c0 INT);",
      "CREATE VIEW v0(c0) AS SELECT CAST(t0.c0 AS INTEGER) FROM t0;",
      "INSERT INTO t0(c0) VALUES (0);",
      "SELECT * FROM t0 LEFT JOIN v0 ON v0.c0 >= '0' WHERE TRUE UNION SELECT 0,0 WHERE 0; -- expected: {0|0}, actual:{0|NULL}"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": ["SELECT (1 IN (2 IS TRUE)); -- expected: {1}, actual: {0}"],
    "dbms": "SQLite"
  },
  {
    "statements": ["SELECT 1 % '1E1'; -- expected: {1.0}, actual: {0.0}"],
    "dbms": "SQLite"
  }
]
