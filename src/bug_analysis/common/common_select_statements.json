[
  {
    "statements": ["SELECT * FROM test; -- only one row is fetched"],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * from test; -- Error: malformed database schema (index_0) - non-deterministic functions prohibited in index expressions"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM test WHERE (c0 LIKE '+/'); -- fetches no row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE (LIKELY(~c0) OR TRUE); -- no row fetched"
    ],
    "dbms": "SQLite"
  },
  { "statements": ["SELECT * FROM t0; -- returns no row"], "dbms": "SQLite" },
  {
    "statements": [
      "SELECT * FROM t1, t0 WHERE t1.c0 < t0.c0; -- no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c0 LIKE './'; -- fetches no rows"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE ((t0.c0 > 'a') OR (t0.c0 <= 'a')); -- fetches no row",
      "SELECT ((t0.c0 > 'a') OR (t0.c0 <= 'a')) FROM t0; -- returns 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT DISTINCT * FROM t1 WHERE (t1.c0 IS NULL); -- database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT 1e500 >= 1,  CAST(1e500 AS INT) >= CAST(1 AS INT), ROUND(1e500) >= ROUND(1); -- 1|1|0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": ["SELECT * FROM t0 WHERE t0.c0 IS NOT 1; -- returns no row"],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c0 IN (SELECT c0 FROM t0) AND t0.c1 ISNULL; -- fetches only one row instead of all five rows"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT 1, NULL INTERSECT SELECT * FROM (SELECT t2.c0, t1.c1 FROM t1, t2 WHERE ((t2.rowid <= 'a')) OR (t1.c0 <= t2.c0) ORDER BY 'a' DESC LIMIT 100); -- no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t1 WHERE (t1.c1 = CAST(8366271098608253588 AS REAL)); -- fetches row",
      "SELECT * FROM t0, t1 WHERE (t1.c1 = CAST(8366271098608253588 AS REAL)); -- fetches no row",
      "SELECT * FROM t0, t1 WHERE (t1.c1 >= CAST(8366271098608253588 AS REAL) AND t1.c1 <= CAST(8366271098608253588 AS REAL)); -- fetches row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0, t1 WHERE (t0.c1 >= 1 OR t0.c1 < 1) AND t0.c0 IN (1, t1.c0) ORDER BY 1; -- results in a segfault"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT DISTINCT * FROM t0; -- fetches C3|1 rather than a|1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE (((0 IS NOT FALSE) OR NOT (0 IS FALSE OR (t0.c0 IN (-1)))) IS 0); -- fetches no row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT CAST('-' AS NUMERIC); -- unexpected: computes 0.0 rather than 0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT '' - 2851427734582196970; -- actual: -2851427734582196736, expected: -2851427734582196970"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT CAST(c0 AS NUMERIC) FROM t0; -- expected: 1, actual: 1.0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c0 LIKE ' 1-'; -- expected: ' 1-', actual: no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": ["SELECT -'.'; -- expected: 0, actual: 0.0"],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT ((CAST(1 as INT)) COLLATE BINARY) == '1'; -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": ["SELECT -'1.0'; -- expected: -1, actual: -1.0"],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT (1 IN (CAST('1' as TEXT) COLLATE NOCASE)); -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT CAST('8.2250617031974513E18' AS NUMERIC); -- expected: 8225061703197451300, unexpected: 8.22506170319745e+18"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT LIKELY(CAST(1 AS INT)) = '1'; -- expected: 0, actual: 1",
      "SELECT UNLIKELY(CAST(1 AS INT)) = '1'; -- expected: 0, actual: 1",
      "SELECT LIKELIHOOD(CAST(1 AS INT), 0.5) = '1'; -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT 0.5 IS TRUE COLLATE NOCASE; -- expected: 1, actual: 0",
      "SELECT 0.5 IS TRUE COLLATE RTRIM; -- expected: 1, actual: 0",
      "SELECT 0.5 IS TRUE COLLATE BINARY; -- expected: 1, actual: 0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT CAST('-0.0' AS NUMERIC); -- expected: 0, unexpected: 0.0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE CAST(t0.c0 AS TEXT) = 'A'; -- expected: no row is fetched, actual: a"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c0 LIKE '.1%'; -- expected: '.1%', actual: no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE c1 = 1; -- expected: ' ', 1, actual: no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0; -- unexpected: Table 'to' is marked as crashed and last (automatic?) repair failed"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE (t0.c3 COLLATE NOCASE) BETWEEN 1 AND '5'; -- expected: no row is fetched, actual: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": ["SELECT (NULL) IN (SELECT t0.c3 FROM t0 WHERE t0.c0);"],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT (NULL) IN (SELECT t0.c0 FROM t0 WHERE ((t0.c0) OR TRUE) IS NULL); -- unexpected: ERROR 1032 (HY000): Can't find record in 't0'"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "select COLUMN_KEY, COLUMN_NAME from information_schema.columns where table_schema = 'a' and TABLE_NAME = 't0'; -- unexpected: c0 is still shown as PRI"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE NOT(t0.c0 <=> 2035382037); -- expected: row is fetched, actual: no row is fetched"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE IF(FALSE, t0.c0, 0.1); -- expected: row is fetched, actual: row is not fetched"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": ["SELECT FALSE XOR '0.5'; -- expected: 1, actual: 0"],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "select * from information_schema.TABLES; -- unexpected (when executed with multiple threads): Duplicate entry 'triggerbug21-t0' for key 'PRIMARY'"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT BENCHMARK(NULL, 1); -- expected: 0, actual: NULL",
      "SELECT BENCHMARK(-1, 1); -- expected: 0, actual: NULL"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE COALESCE(t0.c0); -- expected: row is fetched, actual: no row is fetched",
      "SELECT * FROM t0 WHERE IFNULL(t0.c0, 1); -- expected: row is fetched, actual: no row is fetched"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c0; -- expected: row is fetched, actual: row is not fetched"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE CAST(COALESCE(t0.c0, -1) AS UNSIGNED); -- expected: row is selected, actual: no row is selected",
      "SELECT * FROM t0 WHERE CAST(IFNULL(t0.c0, -1) AS UNSIGNED); -- expected: row is selected, actual: no row is selected"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT t0.c0 IN (1, CAST(t0.c0 AS UNSIGNED)) from t0; -- expected: 0, actual: 1"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c0 AND 1; -- expected: 0.5, actual: no row is fetched",
      "SELECT * FROM t0 WHERE t0.c0 OR 0; -- expected: 0.5, actual: no row is fetched",
      "SELECT * FROM t0 WHERE t0.c0 XOR 0;  -- expected: 0.5, actual: no row is fetched"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT '\\n1' & 1; -- expected: 1, actual: 0",
      "SELECT '\\n1' | 0; -- expected: 1, actual: 0",
      "SELECT '\\n1' ^ 1; -- expected: 0, actual: 1"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0, t1 WHERE (CAST(t1.c0 AS UNSIGNED)) > (IFNULL(\"u\", t0.c0)); -- expected: row is fetched, actual: no row is fetched"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE NOT((t0.c1 IS NULL) AND ((t0.c0) != (1))); -- unexpected: ERROR 5 (HY000): Out of memory (Needed 24 bytes)"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": ["SELECT \"a\" IN (0); -- expected: 0, actual: 1"],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c1 < (t0.c0 & t0.c0) AND t0.c0 = -1; -- expected: fetches row, actual: does not fetch the row"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE GREATEST((-1) & (-1), -t0.c0); -- expected: row is fetched, actual: row is not fetched"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT c0, c1 FROM t0 GROUP BY c0, c1; -- expected: 0|0 and 0|1, actual: 0|0"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE nullif(FALSE, TRUE) OR t0.c0; -- expected: row is fetched, actual: ERROR:  index key does not match expected index column"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE 'baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' > t0.c0; -- unexpected: ERROR: found unexpected null value in index \"i0\""
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE (t0.c0 AND t0.c1) >= TRUE; -- ERROR:  negative bitmapset member not allowed"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 ORDER BY t0.c1; -- unexpected: database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT DISTINCT * FROM t1 WHERE t1.c3 = 1; -- expected: |0|1|, 0||1|, ||1|, actual: |0|1|"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT MIN(t0.c0), t0.c1 FROM t0; -- expected: NULL | 1, actual: NULL | NULL"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT MIN(t0.c1), t0.c0 FROM t0 WHERE t0.c1 ISNULL; -- expected: NULL | 1, actual: NULL | NULL"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0(c0) AS SELECT SUM(t0.c1) FROM t0;",
      "SELECT * FROM v0, t0 WHERE t0.c1 <= v0.c0; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0(c0, c1) AS SELECT t0.c0, AVG(t0.c1) FROM t0;",
      "SELECT * FROM v0 WHERE v0.c1 < v0.c0; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0(c0) AS SELECT t0.c0 FROM t0;",
      "SELECT 0 IN (c0) FROM v0; -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0(c0, c1) AS SELECT t0.c1, t0.c0 FROM t0 WHERE CAST(t0.rowid AS INT) = 1;",
      "SELECT v0.c0, MIN(v0.c1) FROM v0; -- expected: 0|, actual: |"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE ((NULL IS FALSE) IS FALSE); -- expected: row is fetched: actual: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE EXISTS (SELECT MIN(c0)  OVER (), CUME_DIST() OVER () FROM t0) BETWEEN 1 AND 1;"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0(c0) AS SELECT LOWER(CAST('1e500' AS TEXT)) FROM t0;",
      "SELECT v0.c0 FROM v0, t0 WHERE t0.rowid NOT IN (0, 0, v0.c0); -- expected: '1e500', actual: Inf"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT DISTINCT * FROM t0 WHERE NULL IS t0.c0; -- unexpected: |1|a is not part of the result set"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE '-1' BETWEEN 0 AND t0.c0; -- expected: 1|a, actual: no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE - x'ce' >= t0.c0; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE LIKELY(t0.rowid) <= '0'; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE '1' IN (t0.c0); -- unexpected: fetches row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE (t0.c0 IS FALSE) IS FALSE; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c1 IS FALSE BETWEEN FALSE AND TRUE; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE '' BETWEEN t0.c0 AND 1 IN (FALSE); -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT CAST(+ t0.c0 AS BLOB) LIKE 0 FROM t0; -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE c0 IN ('2070934912552030444'); -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c2 IS NULL; -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c1 <= t0.c0; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v2(c0, c1) AS SELECT 'B' COLLATE NOCASE, 'a' FROM t0 ORDER BY t0.c0;",
      "SELECT SUM(count) FROM (SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2); -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0(c0, c1) AS SELECT DISTINCT t0.c0, 'a' FROM t0;",
      "SELECT v0.c1 >= v0.c0 FROM v0; -- actual: 1, expected: 0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c0 GLOB '-*'; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT COUNT(*) FROM t0 WHERE INSTR(x'aabb', t0.c0) ORDER BY t0.c0, t0.c1; -- 1",
      "SELECT * FROM t0 WHERE INSTR(x'aabb', t0.c0) ORDER BY t0.c0, t0.c1; -- no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0(c0) AS SELECT t0.rowid FROM t0 ORDER BY 1;",
      "SELECT COUNT(*) FROM v0 WHERE ABS('1') = v0.c0; -- expected: 1, actual: 0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0 AS SELECT c1 FROM t1 LEFT JOIN t0;",
      "SELECT * FROM v0 WHERE NOT(v0.c1 IS FALSE); -- expected: row is fetched, actual: no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0(c0) AS SELECT t1.c1 FROM t0 LEFT JOIN t1;",
      "SELECT * FROM v0 WHERE v0.c0 NOTNULL NOTNULL; -- expected: row is fetched, actual: no row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE (+ t0.c1, 1) >= (t0.c0, 1); -- expected: row is not fetched, actual: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE (+ t0.c1, 1) >= (t0.c0, 1); -- expected: row is not fetched, actual: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE); -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE (t0.c0, 0) < ('B' COLLATE NOCASE, 0); -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT t0.c1 BETWEEN 0 AND (CASE WHEN 1 THEN 1 ELSE t0.c0 END NOT NULL) FROM t0; -- expected: 1 and 1, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT COUNT(*) FROM t0 WHERE t0.c0 GLOB t0.c0; -- expected: 1, actual: 2"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0(c0) AS SELECT t0.c0 FROM t1 LEFT JOIN t0;",
      "SELECT COUNT(*) FROM v0 WHERE NULL IN (v0.c0); -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0(c0) AS SELECT t0.c0 FROM t1 LEFT JOIN t0;",
      "SELECT * FROM v0 WHERE (v0.c0, x'') != (NULL, 0); -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE 0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1; -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0 AS SELECT DISTINCT t0.c0 FROM vt0, t0 ORDER BY vt0.rowid;",
      "SELECT * FROM v0; -- unexpected: 4 rows are fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c1 NOT IN (t0.c0); -- unexpected: cache lookup failed for collation 0"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c2 OR t0.c1 OR t0.c0; -- TRAP: FailedAssertion(\"clauses != NIL\", File: \"mcv.c\", Line: 1551)"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c0 LIKE ''; -- ERROR:  no = operator for opfamily 426"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "CREATE VIEW v0 AS SELECT * FROM t0;",
      "CREATE OR REPLACE VIEW v0 AS SELECT * FROM v0;",
      "SELECT * FROM information_schema.tables; -- server process (PID 2461) was terminated by signal 11: Segmentation fault"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "SELECT * FROM t1 LEFT JOIN t0 WHERE t0.c0 ISNULL; -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0(c0) AS (SELECT (t0.c0 COLLATE \"C\")::INT FROM t0); -- FailedAssertion(\"!OidIsValid(def->collOid)\", File: \"view.c\", Line: 89)"
    ],
    "dbms": "PostgreSQL"
  },
  {
    "statements": [
      "SELECT * FROM rt0 WHERE rt0.c2 >= 'a'; -- unexpected: fetches row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM rt0 WHERE rt0.c0 = NULL; -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM rt1, rt0 WHERE rt0.c0 = CAST(rt1.c0 AS TEXT); -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM rt0, t0 WHERE (t0.c0, 0) > (rt0.c2, 0); -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM rt0 WHERE '0' = rt0.c2; -- unexpected: row is not fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM rt0 WHERE rt0.c1 > '-1'; -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT 0 in (rt0.c3) ISNULL FROM rt0; -- expected: 1, actual: 0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": ["SELECT * FROM t0, t1 WHERE t0.c0 == 0; -- out of memory"],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT t1.c1 IS TRUE FROM t0 LEFT JOIN t1; -- expected: 0, actual: 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "UPDATE t0 SET c0 = (SELECT 1 FROM t0); -- unexpected: database table is locked"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE (1 BETWEEN CAST(t0.c0 AS TEXT) AND t0.c0); -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE (0, t0.c0) IN(SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0); -- sqlite3.c:87244: sqlite3VdbeExec: Assertion `memIsValid(pRec)' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE(c0, 0) IN(SELECT FIRST_VALUE(0) OVER(), 0); -- Segmentation fault"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE(c0 NOTNULL) COLLATE BINARY BETWEEN 0 AND c0; -- sqlite3.c:98025: sqlite3ExprSkipCollateAndLikely: Assertion `pExpr->op==TK_COLLATE' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE CAST(SUBSTR(c0, 0) AS TEXT) > 0; -- sqlite3.c:81076: sqlite3MemCompare: Assertion `pMem1->enc==pMem2->enc || pMem1->db->mallocFailed' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE (t0.c0, 1) IN(SELECT NTILE(1) OVER(), 0 FROM t0); -- sqlite3.c:90197: sqlite3VdbeExec: Assertion `pC!=0' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 LEFT JOIN t1 WHERE (t1.c0 BETWEEN 0 AND 0) > ('' AND t0.c0); -- sqlite3.c:103271: impliesNotNullRow: Assertion `pWalker->eCode==0' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0 AS SELECT 0 LIMIT 0;",
      "SELECT * FROM t0 LEFT JOIN rt0 INNER JOIN v0; -- sqlite3.c:185720: rtreeRelease: Assertion `pRtree->nNodeRef==0 || pRtree->bCorrupt' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "UPDATE rt0 SET c0 = 0 WHERE(SELECT ROW_NUMBER() OVER() FROM rt0); -- database table is locked"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE ((0, 0) IN (SELECT COUNT(*), LAG(5) OVER(PARTITION BY 0) FROM t0), 0) <= (t0.c1, 0); -- sqlite3.c:98053: sqlite3TableColumnAffinity: Assertion `iCol<pTab->nCol' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT (0, 0) IN(SELECT MIN(c0), NTILE(0) OVER()) FROM t0; -- sqlite3.c:103486: exprSrcCount: Assertion `0' failed."
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE x'' > t0.c2 GROUP BY c1; -- database disk image is malformed"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM vt1 NATURAL JOIN vt0 WHERE vt0.c1 MATCH 'a'; -- parse error in rank function:"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM stat WHERE stat.aggregate == NULL; -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM stat WHERE stat.name = NULL; -- unexpected: row is fetched"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "CREATE VIEW v0(c0) AS SELECT CAST(0 AS INT) FROM t0;",
      "SELECT * FROM t0, v0 WHERE 0 >= t0.c0 AND t0.c0 = v0.c0; -- unexpected: fetches row"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT COUNT(*) FROM t0 WHERE SUBSTR(t0.c0, ','); -- expected: 1, actual: 2"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0 GROUP BY c0; -- expected: 1.0|1.0, actual: 1.0|1",
      "SELECT * FROM t0; -- 1.0|1.0"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT MAX(CASE 1 WHEN 1 THEN t0.c0 END) FROM t0; -- \uc706",
      "SELECT MAX(t0.c0) FROM t0; -- 1"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT HEX(MIN(a)) FROM (SELECT CHAR(0, 1) COLLATE NOCASE as a UNION SELECT CHAR(0, 0) as a); -- 0000",
      "SELECT HEX(MIN(a)) FROM (SELECT CHAR(0, 0) COLLATE NOCASE as a UNION SELECT CHAR(0, 1) as a); -- 0001"
    ],
    "dbms": "SQLite"
  },
  {
    "statements": [
      "SELECT * FROM t0, t1 WHERE t0.c0 = t1.c0; -- expected: {0, -0}, actual: {}"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE 0.9 > t0.c0; -- expected: {0}, actual: {}"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c1 BETWEEN 0 AND (\"\\n2\"); -- expected: {NULL, 1}, actual: {}"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c0 BETWEEN 18446744073561222871 AND 0; -- expected: {0}, actual: {}?"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE 0.9 > t0.c0; -- expected: {0}, actual: {}"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c0 BETWEEN 0 AND '1e500'; -- expected: {0}, actual: {}"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": [
      "SELECT * FROM t0 WHERE t0.c0 NOT BETWEEN '\u05a3a' AND NULL; -- expected: {0}, actual: {}"
    ],
    "dbms": "MySQL"
  },
  {
    "statements": ["SELECT (1 IN (2 IS TRUE)); -- expected: {1}, actual: {0}"],
    "dbms": "SQLite"
  },
  {
    "statements": ["SELECT 1 % '1E1'; -- expected: {1.0}, actual: {0.0}"],
    "dbms": "SQLite"
  }
]
